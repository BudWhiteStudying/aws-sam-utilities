AWSTemplateFormatVersion: '2010-09-09'
Description: 'shift_manager_aws

  Sample SAM Template for shift_manager_aws

  '
Globals:
  Function:
    Layers:
    - !Ref 'SharedUtilitiesLayer'
    Timeout: 3
Outputs:
  CreateNotificationRuleFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'CreateNotificationRuleFunction.Arn'
  CreateOperatorFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'CreateOperatorFunction.Arn'
  CreateShiftFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'CreateShiftFunction.Arn'
  DeleteNotificationRuleFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'DeleteNotificationRuleFunction.Arn'
  DeleteOperatorFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'DeleteOperatorFunction.Arn'
  DeleteShiftFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'DeleteShiftFunction.Arn'
  EmailDeliveryApi:
    Description: API Gateway endpoint URL for the Prod stage
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/email-delivery/'
  GetNamedShiftFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'GetNamedShiftFunction.Arn'
  GetNotificationRuleFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'GetNotificationRuleFunction.Arn'
  GetOperatorFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'GetOperatorFunction.Arn'
  GetOperatorsFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'GetOperatorsFunction.Arn'
  GetShiftFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'GetShiftFunction.Arn'
  NamedShiftApi:
    Description: API Gateway endpoint URL for the Prod stage
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/named-shift/'
  NotificationRuleApi:
    Description: API Gateway endpoint URL for the Prod stage
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/notification-rule/'
  OperatorApi:
    Description: API Gateway endpoint URL for the Prod stage
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/operator/'
  OperatorsApi:
    Description: API Gateway endpoint URL for the Prod stage
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/operators/'
  ShiftApi:
    Description: API Gateway endpoint URL for the Prod stage
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/shift/'
  ShiftNotificationApi:
    Description: API Gateway endpoint URL for the Prod stage
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/shift-notification/'
  TriggerEmailDeliveryFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'TriggerEmailDeliveryFunction.Arn'
  TriggerShiftNotificationFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'TriggerShiftNotificationFunction.Arn'
  UpdateNotificationRuleFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'UpdateNotificationRuleFunction.Arn'
  UpdateOperatorFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'UpdateOperatorFunction.Arn'
  UpdateShiftFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'UpdateShiftFunction.Arn'
  BasicIamRole:
    Description: Lambda function IAM Role with only CW logs permissions
    Value: !GetAtt 'BasicIamRole.Arn'
  InvokeLambdasIamRole:
    Description: Lambda function IAM Role with Lambda.invoke permission and CW logs permissions
    Value: !GetAtt 'InvokeLambdasIamRole.Arn'
  QueryDynamoDBIamRole:
    Description: Lambda function IAM Role with DynamoDB read-only permissions and CW logs permissions
    Value: !GetAtt 'QueryDynamoDBIamRole.Arn'
  InvokeLambdasAndQueryDynamoDBIamRole:
    Description: Lambda function IAM Role with DynamoDB read-only permissions and CW logs permissions
    Value: !GetAtt 'InvokeLambdasAndQueryDynamoDBIamRole.Arn'
  InvokeLambdasAndSESIamRole:
    Description: Lambda function IAM Role with DynamoDB read-only permissions and CW logs permissions
    Value: !GetAtt 'InvokeLambdasAndSESIamRole.Arn'
Resources:
  BasicIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "BasicIamRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    Description: Lambda function IAM Role with only CW logs permissions
  InvokeLambdasIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "InvokeLambdasIamRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
    Description: Lambda function IAM Role with Lambda.invoke permission and CW logs permissions
  QueryDynamoDBIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: "QueryDynamoDBIamRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
    Description: Lambda function IAM Role with DynamoDB read-only permissions and CW logs permissions
  InvokeLambdasAndQueryDynamoDBIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "InvokeLambdasAndQueryDynamoDBIamRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
    Description: Lambda function IAM Role with Lambda.invoke permission,  DynamoDB read-only permissions, and CW logs permissions
  InvokeLambdasAndSESIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: "InvokeLambdasAndSESIamRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
    Description: Lambda function IAM Role with SES full-access permissions
  CreateNotificationRuleFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: create_notification_rule/
      Events:
        CreateNotificationRule:
          Properties:
            Method: post
            Path: /notification-rule
          Type: Api
      FunctionName: CreateNotificationRuleFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  CreateOperatorFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: create_operator/
      Events:
        CreateOperator:
          Properties:
            Method: post
            Path: /operator
          Type: Api
      FunctionName: CreateOperatorFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  CreateShiftFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: create_shift/
      Events:
        CreateShift:
          Properties:
            Method: post
            Path: /shift
          Type: Api
      FunctionName: CreateShiftFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  DeleteNotificationRuleFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: delete_notification_rule/
      Events:
        DeleteNotificationRule:
          Properties:
            Method: delete
            Path: /notification-rule
          Type: Api
      FunctionName: DeleteNotificationRuleFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  DeleteOperatorFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: delete_operator/
      Events:
        DeleteOperator:
          Properties:
            Method: delete
            Path: /operator
          Type: Api
      FunctionName: DeleteOperatorFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  DeleteShiftFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: delete_shift/
      Events:
        DeleteShift:
          Properties:
            Method: delete
            Path: /shift
          Type: Api
      FunctionName: DeleteShiftFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  GetNamedShiftFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: get_named_shift/
      Events:
        GetNamedShift:
          Properties:
            Method: get
            Path: /named-shift
          Type: Api
      FunctionName: GetNamedShiftFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  GetNotificationRuleFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: get_notification_rule/
      Events:
        GetNotificationRule:
          Properties:
            Method: get
            Path: /notification-rule
          Type: Api
      FunctionName: GetNotificationRuleFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  GetOperatorFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: get_operator/
      Events:
        GetOperator:
          Properties:
            Method: get
            Path: /operator
          Type: Api
      FunctionName: GetOperatorFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  GetOperatorsFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: get_operators/
      Events:
        GetOperators:
          Properties:
            Method: get
            Path: /operators
          Type: Api
      FunctionName: GetOperatorsFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  GetShiftFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: get_shift/
      Events:
        GetShift:
          Properties:
            Method: get
            Path: /shift
          Type: Api
      FunctionName: GetShiftFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  SharedUtilitiesLayer:
    Properties:
      CompatibleRuntimes:
      - python3.9
      ContentUri: lambda_layers/shared_utils
      Description: Shared utilities for the shift_manager app
      LayerName: shared-utilities
      LicenseInfo: MIT
      RetentionPolicy: Retain
    Type: AWS::Serverless::LayerVersion
  TriggerEmailDeliveryFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: trigger_email_delivery/
      Events:
        TriggerEmailDelivery:
          Properties:
            Method: post
            Path: /email-delivery
          Type: Api
      FunctionName: TriggerEmailDeliveryFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'InvokeLambdasAndSESIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  TriggerShiftNotificationFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: trigger_shift_notification/
      Events:
        TriggerShiftNotification:
          Properties:
            Method: get
            Path: /shift-notification
          Type: Api
      FunctionName: TriggerShiftNotificationFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'InvokeLambdasAndQueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  UpdateNotificationRuleFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: update_notification_rule/
      Events:
        UpdateNotificationRule:
          Properties:
            Method: put
            Path: /notification-rule
          Type: Api
      FunctionName: UpdateNotificationRuleFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  UpdateOperatorFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: update_operator/
      Events:
        UpdateOperator:
          Properties:
            Method: put
            Path: /operator
          Type: Api
      FunctionName: UpdateOperatorFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
  UpdateShiftFunction:
    Properties:
      Architectures:
      - x86_64
      CodeUri: update_shift/
      Events:
        UpdateShift:
          Properties:
            Method: put
            Path: /shift
          Type: Api
      FunctionName: UpdateShiftFunction
      Handler: app.lambda_handler
      Role: !GetAtt 'QueryDynamoDBIamRole.Arn'
      Runtime: python3.9
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
